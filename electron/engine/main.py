# main.py

# import matplotlib
# import matplotlib.pyplot as plt
import os
from .optimization import *
from .basic_functions import *
import json

# STATIC_DIR = os.path.join(os.path.dirname(
#     os.path.abspath(__file__)), 'static')
DATA_DIR = os.path.join(os.path.dirname(
    os.path.abspath(__file__)), 'gui', 'assets', 'data')
JSON_FILE_PATH = os.path.join(DATA_DIR, 'polygons.json')
SHAPE_FILE_PATH = os.path.join(DATA_DIR, "best_path.shp")
PROJECTED_COORDS_JSON_PATH = os.path.join(
    DATA_DIR, 'projected_coordinates.json')

# Ensure the data directory exists
os.makedirs(DATA_DIR, exist_ok=True)


# also take polygon info from JSON_FILE_PATH
# TODO: add more parameters
def optimize(disp_diam: int):
    debug_info = []
    debug_info.append("Received a request to /optimize")

    # Use the JSON file generated by mapHandler.js
    if os.path.exists(JSON_FILE_PATH):
        file_path = JSON_FILE_PATH
        debug_info.append(f"Using generated JSON file: {file_path}")
    else:
        debug_info.append("No generated JSON file found")
        return  # 'error': 'No generated JSON file found', 'debug': debug_info

    if not disp_diam:
        debug_info.append("Display diameter is required")
        # jsonify({'error': 'Display diameter is required', 'debug': debug_info})
        return

    debug_info.append(f"Display diameter received: {disp_diam}")

    # Extract coords from the uploaded JSON file
    with open(file_path, 'r') as json_file:
        coordinate_info = json.load(json_file)

    all_projected_coords = []
    bestPathList = []

    # Iterate through each polygon in the coordinate info
    for polygon in coordinate_info:
        debug_info.append(f"Extracted coordinates from JSON: {polygon}")

        # Construct the best path and measure runtime
        optimal_func = airtime_coverage_weighted(75, 15, 10)
        pathlist, pathlistruntime = construct_pathlist(
            polygon, disp_diam, children=None, poly_offset=0, num_path=10)  # calculates the optimized path
        datatable, best_path = find_best_path(pathlist, optimal_func)
        debug_info.append(f"Constructed best path: {best_path}")

        # Assuming best_path.to_coordinates() returns coordinates in EPSG:3857
        bestPathList.append(best_path.path)
        projected_coords = best_path.to_coordinates()
        all_projected_coords.append(projected_coords)

        # # Save the plot to a file in the static directory
        # plot_filename = f'best_path_{time.time()}.png'
        # plot_path = os.path.join(STATIC_DIR, plot_filename)
        # plt.figure(figsize=(16, 8))
        # showpath(best_path)
        # plt.savefig(plot_path)
        # plt.close()
        # debug_info.append(f"Saved plot to {plot_path}")

        # Shapefile extraction

        gdf = gpd.GeoDataFrame(geometry=bestPathList[0])
        gdf.set_crs(epsg=3857, inplace=True)
        gdf.to_file(SHAPE_FILE_PATH)

    # Save projected coordinates to a new JSON file
    try:
        with open(PROJECTED_COORDS_JSON_PATH, 'w') as jsonfile:
            json.dump(all_projected_coords, jsonfile)
            debug_info.append(
                f"Saved projected coordinates to {PROJECTED_COORDS_JSON_PATH}")
    except Exception as e:
        debug_info.append(f"Error saving projected coordinates: {str(e)}")

    return all_projected_coords, debug_info


def generate_polygons(data):
    polyList = shp2coords(data)
    print(polyList)
    return json.dumps(polyList), polyList


def upload_file(shp_path):
    try:
        polygonString, polygonList = generate_polygons(shp_path)

    except Exception as e:
        return

    with open(os.path.join(os.path.dirname(__file__), 'data', 'polygons.json'), 'w') as f:
        f.write(polygonString)
    return  # jsonify(success=True)
